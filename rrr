import os
import re
from datetime import datetime, timedelta

def delete_old_nexus_audit_logs(directory, days_old=7):
    """
    Delete log files older than 'days_old' days from the given directory.
    Handles 3 log file patterns:
      - redis_logs_YYYY-MM-DD.log
      - nexus-audit_get_api_logs_YYYY-MM-DD.log
      - nexus-audit_YYYY-MM-DD.log
    
    Args:
        directory (str): Path to the log directory
        days_old (int): Number of days threshold (default: 7)
    
    Returns:
        list: List of deleted file paths
    """
    if not os.path.exists(directory):
        raise FileNotFoundError(f"Directory '{directory}' does not exist")
    
    cutoff_date = datetime.now() - timedelta(days=days_old)
    deleted_files = []
    
    # Regex pattern to match _YYYY-MM-DD.log at the end of filename (before .log)
    date_pattern = r'_(\d{4}-\d{2}-\d{2})\.log$'
    regex = re.compile(date_pattern)
    
    for filename in os.listdir(directory):
        file_path = os.path.join(directory, filename)
        
        # Skip if not a file
        if not os.path.isfile(file_path):
            continue
            
        # Try to extract date from filename
        match = regex.search(filename)
        if not match:
            continue  # Skip files that don't match the pattern
        
        date_str = match.group(1)  # e.g., "2025-10-06"
        try:
            file_date = datetime.strptime(date_str, '%Y-%m-%d')
        except ValueError:
            continue  # Skip if date parsing fails
        
        # Delete if older than cutoff
        if file_date < cutoff_date:
            try:
                os.remove(file_path)
                deleted_files.append(file_path)
                print(f"✅ Deleted: {file_path}")
            except OSError as e:
                print(f"❌ Error deleting {file_path}: {e}")
    
    return deleted_files

# Example usage
if __name__ == "__main__":
    log_dir = "/home/xalta/nexus-audit"
    try:
        deleted = delete_old_nexus_audit_logs(log_dir, days_old=7)
        print(f"\n🎉 Total files deleted: {len(deleted)}")
    except Exception as e:
        print(f"🚨 Error: {e}")
